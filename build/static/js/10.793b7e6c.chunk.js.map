{"version":3,"sources":["components/PulldownDiv/index.tsx","components/AddTags/index.tsx","utils/getArrayDiff.ts","components/Tree/Branch.tsx","components/Tree/index.tsx","../node_modules/@ant-design/icons-svg/es/asn/MinusCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/MinusCircleOutlined.js","pages/Project/NewP/NPMembers.tsx","pages/Project/NewP/ProjectTreeCard.tsx","pages/Project/NewP/index.tsx"],"names":["PulldownDiv","props","PDInput","styled","Input","style","backgroundColor","overlay","MenuContainer","dropdownOverlay","trigger","Menu","Option","Select","tags","index","MyTag","useState","indexOf","children","select","setselect","dispatch","useAppDispatch","PointerTag","Tag","onClick","delTags","pushTags","color","AddTags","a","b","items","setitems","name","setname","onNameChange","event","target","value","addItem","message","error","Conatiner","Head","Title","map","tag","proTags","Bottom","mode","allowClear","defaultValue","filter","i","width","onSelect","e","onDeselect","placeholder","dropdownRender","menu","display","flexWrap","padding","flex","onChange","cursor","PlusOutlined","item","div","span","seq1","Branch","set","btn","seq","num","setnum","tree","useAppSelector","store","project","projectTree","Btn","order","AddBox","title","onConfirm","success","delChild","okText","cancelText","SpaceLeft","onBlur","setChild","content","Space","className","PointTree","child","setChildKey","key","toString","split","Number","defaultExpandAll","switcherIcon","showLine","showIcon","treeData","pushChild","Container","PointContainer","TreePoint","date","setNum","setSeq","Point","button","PBP","PBPTop","justifyContent","bordered","setTree","delTreeNode","PBPFoot","marginLeft","moment","undefined","PointList","setseq","keyNum","ProgressBar","list","setKey","pointProp","para","pushTree","Tree","ProgressTop","PointPlus","Plus","PointDel","Del","MinusOutlined","MinusCircleOutlined","ref","React","AntdIcon","Object","assign","icon","MinusCircleOutlinedSvg","displayName","NPMembers","alert","setalert","username","me","data","Form","useForm","form","onFinish","values","members","role","val","push","setMem","autoComplete","List","fields","add","remove","align","Item","noStyle","shouldUpdate","prevValues","curValues","area","sights","isListField","label","disabled","UserSelector","field","fieldKey","rules","required","AddBtn","type","block","marginBottom","htmlType","Button","ProjectTreeCard","TreeContainer","preventDefault","RangePicker","DatePicker","TextArea","NewP","visible","setvisible","finish","setfinish","history","useHistory","useEffect","clearTree","setTags","status","subTitle","onBack","goBack","NPForm","info","startAt","format","endAt","proRegist","then","setTimeout","catch","maxLength","showCount","resetFields","PTContainer","MoveDiv"],"mappings":"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","file":"static/js/10.793b7e6c.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\nimport { Input, Menu, Dropdown, InputProps } from 'antd';\r\nimport { ReactChild, useState, memo, useRef } from 'react';\r\n\r\ninterface pulldownDivProps extends InputProps {\r\n    mention?: boolean;\r\n    dropdownOverlay?: ReactChild;\r\n}\r\n\r\n\r\nexport default function PulldownDiv(props: pulldownDivProps) {\r\n\r\n\r\n    const PDInput = styled(Input)`\r\n        ${{ ...props.style }}\r\n        color:${props.style?.backgroundColor || 'white'}\r\n    `\r\n\r\n    return (\r\n        <div>\r\n            <Dropdown overlay={<MenuContainer >{props.dropdownOverlay}</MenuContainer>} trigger={['click']} >\r\n                <PDInput/>\r\n            </Dropdown>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MenuContainer = styled(Menu)`\r\n    min-height:10rem;\r\n`\r\n","import { Select,  Input, Tag, message, TagProps } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useAppDispatch } from \"store/hooks\";\r\nimport { pushTags, delTags } from \"store/features/projectSlice\";\r\nimport { getArrayDiff } from \"utils/getArrayDiff\";\r\n\r\nconst { Option } = Select;\r\nconst tags = [\"招募队友\", \"创新项目评审\", \"黑客松项目\"];\r\n\r\nlet index = 0;\r\n\r\ninterface myTagType extends TagProps {\r\n  tags: string[];\r\n  children: string;\r\n}\r\n\r\nconst MyTag = (props: myTagType) => {\r\n  const [select, setselect] = useState<boolean>(\r\n    props.tags.indexOf(props.children) !== -1\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const PointerTag = styled(Tag)`\r\n    cursor: pointer;\r\n  `;\r\n\r\n  return (\r\n    <PointerTag\r\n      {...props}\r\n      onClick={() => {\r\n        select\r\n          ? dispatch(delTags(`${props.children}`))\r\n          : dispatch(pushTags(`${props.children}`));\r\n        setselect(!select);\r\n      }}\r\n      color={`${select ? \"green\" : props.color || \"blue\"}`}\r\n    >\r\n      {props.children}\r\n      {select && \"  √\"}\r\n    </PointerTag>\r\n  );\r\n};\r\n\r\nexport default function AddTags(props: { proTags: string[] }) {\r\n  const [items, setitems] = useState<string[]>([\"前端\", \"后端\", \"人工智能\"]);\r\n  const [name, setname] = useState<string>(\"\");\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onNameChange = (event: any) => {\r\n    setname(event.target.value);\r\n  };\r\n\r\n  const addItem = () => {\r\n    tags.indexOf(name) !== -1 || items.indexOf(name) !== -1\r\n      ? message.error(\"该标签已存在\")\r\n      : setitems([name || `New item ${index++}`, ...items]);\r\n    setname(\"\");\r\n  };\r\n\r\n  return (\r\n    <Conatiner>\r\n      <Head>\r\n        <Title>项目类型：</Title>\r\n        <div>\r\n          {tags.map((tag) => {\r\n            return (\r\n              <MyTag key={tag} tags={props.proTags}>\r\n                {tag}\r\n              </MyTag>\r\n            );\r\n          })}\r\n        </div>\r\n      </Head>\r\n      <Bottom>\r\n        <Title>项目标签：</Title>\r\n        <Select\r\n          mode=\"multiple\"\r\n          allowClear\r\n          defaultValue={getArrayDiff(props.proTags, tags)}\r\n          style={{ width: \"100%\" }}\r\n          onSelect={(e: string) => {\r\n            dispatch(pushTags(e));\r\n          }}\r\n          onDeselect={(e: string) => {\r\n            dispatch(delTags(e));\r\n          }}\r\n          placeholder=\"请选择项目标签\"\r\n          dropdownRender={(menu) => (\r\n            <div>\r\n              <div style={{ display: \"flex\", flexWrap: \"nowrap\", padding: 8 }}>\r\n                <Input\r\n                  style={{ flex: \"auto\" }}\r\n                  value={name}\r\n                  onChange={onNameChange}\r\n                />\r\n                <a\r\n                  style={{\r\n                    flex: \"none\",\r\n                    padding: \"8px\",\r\n                    display: \"block\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={addItem}\r\n                >\r\n                  <PlusOutlined /> 添加自定义标签\r\n                </a>\r\n              </div>\r\n              {menu}\r\n            </div>\r\n          )}\r\n        >\r\n          {items.map((item) => (\r\n            <Option value={item} key={item}>\r\n              {item}\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n      </Bottom>\r\n    </Conatiner>\r\n  );\r\n}\r\n\r\nconst Head = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\nconst Bottom = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  color: #c0c0c0;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\nconst Conatiner = styled.div`\r\n  padding: 16px;\r\n`;\r\n","export const getArrayDiff = <T>(a: T[], b: T[]) => {\r\n  return a.filter(function (i) {\r\n    return b.indexOf(i) < 0;\r\n  });\r\n};\r\n","import { ReactJSXElement } from '@emotion/react/types/jsx-namespace';\r\nimport styled from '@emotion/styled';\r\nimport { Tree, Input, Popover, Popconfirm, message, } from 'antd';\r\nimport { DataNode } from 'antd/lib/tree';\r\nimport { ReactChild, useState } from 'react';\r\n\r\nimport { Point, PointPlus, PointDel } from './index';\r\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\r\nimport { pushChild, delChild, setChildKey, setChild } from 'store/features/projectSlice';\r\n\r\ninterface propsType {\r\n    seq: number;\r\n    className?: string;\r\n    children: DataNode[];\r\n    btn?: ReactJSXElement;\r\n    set?: boolean;\r\n}\r\n\r\nlet seq1 = 0;\r\n\r\nexport default function Branch(props: propsType) {\r\n\r\n\r\n    const { set, btn, children,  seq } = props\r\n\r\n    const [num, setnum] = useState<number>(0);\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const tree = useAppSelector(store => store.project.projectTree)\r\n\r\n    const Btn = (props: { order?: Array<number> }) => {\r\n\r\n        const order: Array<number> = props.order || []\r\n\r\n        return (\r\n            <>\r\n                <AddBox> \r\n                    {\r\n                        btn ||\r\n                        (set ?\r\n                            <Popconfirm\r\n                                title=\"是否删除该节点？\"\r\n                                onConfirm={() => {\r\n                                    message.success('删除成功');\r\n                                    dispatch(delChild(order))\r\n                                }}\r\n                                okText=\"Yes\"\r\n                                cancelText=\"No\"\r\n                            >\r\n                                <PointDel />\r\n                            </Popconfirm>\r\n                            : <Point />)\r\n                    }\r\n                    {set && (\r\n                        <>\r\n                            <SpaceLeft />\r\n                            <Input\r\n                                placeholder='请输入节点'\r\n                                defaultValue={`${tree[order[0]]?.children[order[1]]?.title}`}\r\n                                onBlur={(e) => { dispatch(setChild({ content: e.target.value, num: order })) }}\r\n                            />\r\n                        </>)}\r\n                </AddBox>\r\n                <Space />\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <Space />\r\n            <PointTree>\r\n                <div className='PBPTree'>\r\n                    {\r\n                        set ?\r\n                            children.map((child) => {\r\n                                dispatch(setChildKey([seq, seq1++]))\r\n                                const key: string = child.key.toString()\r\n                                return (<Btn key={key} order={key.split(/-/).map(Number)} />)\r\n                            }) :\r\n                            <Tree\r\n                                defaultExpandAll\r\n                                className='PBPTree'\r\n                                switcherIcon={<Btn />}\r\n                                showLine={true}\r\n                                showIcon={true}\r\n                                treeData={props.children}\r\n                            />\r\n                    }\r\n                </div>\r\n                {\r\n                    set &&\r\n                    <AddBox>\r\n                        <PointContainer content='添加小节点'>\r\n                            <PointPlus onClick={() => {\r\n                                dispatch(pushChild({\r\n                                    seq: seq,\r\n                                    content: { title: '', key: `${seq}-${num}`, children: [] }\r\n                                }));\r\n                                setnum(num + 1);\r\n                            }} />\r\n                        </PointContainer>\r\n                    </AddBox>\r\n                }\r\n            </PointTree>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Space = styled.div`\r\n    margin-bottom:16px;\r\n`\r\n\r\nconst PointTree = styled.div`\r\n    overflow-x: auto;\r\n    margin-left:13px;\r\n`\r\n\r\nconst AddBox = styled.div`\r\n    display:flex;\r\n    align-items: center;\r\n`\r\n\r\nconst Container = styled.div`\r\n    width:16px;\r\n    height:16px;\r\n`\r\n\r\nexport const PointContainer = (props: { content?: string, children: ReactChild }) => {\r\n\r\n    return (\r\n        <Popover content={props.content}>\r\n            <Container>\r\n                {props.children}\r\n            </Container>\r\n        </Popover>\r\n    )\r\n}\r\n\r\nconst SpaceLeft = styled.div`\r\n    width:16px;\r\n`","import styled from \"@emotion/styled\"\r\nimport { useState } from \"react\";\r\nimport Branch, { PointContainer } from './Branch';\r\nimport './Tree.css';\r\nimport { DatePicker, Input, Popconfirm, message } from 'antd';\r\nimport { PlusOutlined, MinusOutlined } from '@ant-design/icons';\r\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\r\nimport { pushTree, delTreeNode, setKey, setTree } from 'store/features/projectSlice';\r\nimport moment from \"moment\";\r\nimport {branch} from 'types/project';\r\n\r\ninterface PointType extends branch {\r\n    setNum: (para: string) => void,\r\n    setSeq: (para: number) => void,\r\n    num: string,\r\n    order: string,\r\n    seq: number,\r\n    set?: boolean\r\n}\r\n\r\nconst TreePoint = (props: PointType) => {\r\n\r\n    const { title, date, children, set, order, seq, setNum, setSeq } = props;\r\n\r\n    const Point = styled.button`\r\n    width           : 16px;\r\n    height          : 16px;\r\n    background-color :#21b0ff;\r\n    border-radius   : 16px;\r\n    `\r\n    const dispatch = useAppDispatch()\r\n\r\n    const tree = useAppSelector(store => store.project.projectTree)\r\n\r\n    return (\r\n        <>\r\n            <PBP className=\"PBP\">\r\n                <Head className=\"head\">\r\n                    <PBPTop className=\"PBPtop\">\r\n                        {set ?\r\n                            <Input\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center'\r\n                                }}\r\n                                placeholder=\"请输入大节点名称\"\r\n                                bordered={false}\r\n                                defaultValue={`${tree[Number(order)]?.title || ''}`}\r\n                                onBlur={e => { dispatch(setTree({ title: e.target.value, num: Number(order) })) }}\r\n                            />\r\n                            : title}\r\n                    </PBPTop>\r\n                    {\r\n                        set ?\r\n                            <Popconfirm\r\n                                title=\"是否删除该节点？\"\r\n                                onConfirm={() => {\r\n                                    dispatch(delTreeNode(Number(order)));\r\n                                    setSeq(seq - 1);\r\n                                    message.success('删除成功');\r\n                                }}\r\n                                okText=\"是\"\r\n                                cancelText=\"否\"\r\n                            >\r\n                                <PointDel />\r\n                            </Popconfirm> :\r\n                            <Point onClick={() => { setNum(order) }} />\r\n                    }\r\n                    <PBPFoot className=\"PBPfoot\">{\r\n                        set ?\r\n                            (\r\n                                <>\r\n                                    <DatePicker\r\n                                        style={{ width: '80%', marginLeft: '10%' }}\r\n                                        placeholder={\"截止日期\"}\r\n                                        defaultValue={\r\n                                            tree[Number(order)]?.date ?\r\n                                                moment(`${tree[Number(order)]?.date}`, 'YYYY-MM-DD') :\r\n                                                undefined\r\n                                        }\r\n                                        onBlur={e => { dispatch(setTree({ date: e.target.value, num: Number(order) })) }}\r\n                                    />\r\n                                </>\r\n                            )\r\n                            : date}</PBPFoot>\r\n                </Head>\r\n                <Branch children={children} set={set} seq={Number(order)} />\r\n            </PBP>\r\n        </>\r\n    )\r\n}\r\n\r\nconst PointList = (props: { list?: branch[], set?: boolean }) => {\r\n\r\n    const [num, setnum] = useState<string>('0');\r\n    const [seq, setseq] = useState<number>(0)\r\n    const dispatch = useAppDispatch()\r\n\r\n    let keyNum: number = 0;\r\n\r\n    return (\r\n        <>\r\n            <ProgressBar className=\"progressBar\">\r\n                {props.list?.map((title) => {\r\n\r\n                    props.set && dispatch(setKey(keyNum++))\r\n\r\n                    const pointProp = {\r\n                        num: num,\r\n                        setNum: (para: string) => setnum(para),\r\n                        setSeq: (para: number) => setseq(para),\r\n                        order: title.key,\r\n                        set: props.set,\r\n                        seq: seq,\r\n                        ...title\r\n                    }\r\n\r\n\r\n                    return (<TreePoint {...pointProp} />)\r\n                })}\r\n                {\r\n                    props.set &&\r\n                    <PBP className=\"PBP\">\r\n                        <Head className=\"head\">\r\n                            <PBPTop className=\"PBPtop\" />\r\n                            <PointContainer content='添加大节点'>\r\n                                <PointPlus onClick={() => { dispatch(pushTree({ title: '', date: '', key: `${seq}`, children: [] })); setseq(seq + 1) }} />\r\n                            </PointContainer>\r\n                            <PBPFoot className=\"PBPfoot\" />\r\n                        </Head> \r\n                    </PBP>\r\n                } \r\n            </ProgressBar>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default function Tree(props: { list?: branch[], set?: boolean }) {\r\n\r\n    const tree = useAppSelector(store => store.project.projectTree)\r\n\r\n    return (\r\n        <>\r\n            <ProgressTop className=\"progressTop\">\r\n                <PointList list={props.set ? tree : props.list} set={props.set} />\r\n            </ProgressTop>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const PointPlus = (props: React.HTMLProps<HTMLButtonElement>) => {\r\n    return (\r\n        <Point onClick={props.onClick} >\r\n            <Plus />\r\n        </Point>\r\n    )\r\n}\r\n\r\nexport const PointDel = (props: React.HTMLProps<HTMLButtonElement>) => {\r\n    return (\r\n        <Point onClick={props.onClick}>\r\n            <Del />\r\n        </Point >\r\n    )\r\n}\r\n\r\nconst ProgressTop = styled.div`\r\n    width: 100%;\r\n    height: 100px;\r\n`\r\n\r\nconst ProgressBar = styled.div`\r\n    width           : 100%;\r\n    height          : 2px;\r\n    background-color: #b4e4ff;\r\n`\r\n\r\nconst PBP = styled.div`\r\n    width     : 150px;  \r\n    ::-webkit-scrollbar-track \r\n    {\r\n        border-radius   : 3px;\r\n        background-color: white;\r\n    }\r\n    .PBPTree {\r\n        overflow-x: auto;\r\n    }\r\n`\r\n\r\nconst Head = styled.div`\r\n    height: 100px;\r\n\r\n`\r\n\r\nconst PBPTop = styled.span`\r\n    height     : 35px;\r\n    font-size  : 20px;\r\n    line-height: 25px;  \r\n`\r\n\r\nconst PBPFoot = styled.span`\r\n    height     : 35px;\r\n    font-size  : 16px;\r\n    line-height: 21px;\r\n    color      : #808080;\r\n`\r\nexport const Point = styled.button`\r\n    width           : 16px;\r\n    height          : 16px;\r\n    background-color :#21b0ff;\r\n    border-radius   : 16px;\r\n    display: flex;\r\n    justify-content : center;\r\n    align-items : center;\r\n`\r\n\r\nconst Plus = styled(PlusOutlined)`\r\n    font-size :16px;\r\n    color :white;\r\n`\r\n\r\nconst Del = styled(MinusOutlined)`\r\n    font-size :16px;\r\n    color :white;\r\n`","// This icon file is generated automatically.\nvar MinusCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M696 480H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"minus-circle\", \"theme\": \"outlined\" };\nexport default MinusCircleOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport MinusCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/MinusCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar MinusCircleOutlined = function MinusCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: MinusCircleOutlinedSvg\n  }));\n};\n\nMinusCircleOutlined.displayName = 'MinusCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(MinusCircleOutlined);","import { Form, Input, Button, Space, Select, Alert } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\r\n\r\nimport { setMem } from \"store/features/projectSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"store/hooks\";\r\n\r\nimport { members } from \"types/project\";\r\n\r\nimport styled from \"@emotion/styled\";\r\nimport { useState } from \"react\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function NPMembers() {\r\n  const [alert, setalert] = useState<boolean>(false);\r\n\r\n  const username = useAppSelector((store) => store.me.data.username);\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onFinish = (values: any) => {\r\n    let members: members = [{ username: username, role: \"leader\" }];\r\n\r\n    (values.members || []).map((val: any) => {\r\n      val.username.map((username: string) => {\r\n        members.push({ username: username, role: val.role });\r\n      });\r\n    });\r\n\r\n    dispatch(setMem(members));\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      className=\"NPMembersContainer\"\r\n      form={form}\r\n      name=\"dynamic_form_nest_item\"\r\n      onFinish={onFinish}\r\n      autoComplete=\"off\"\r\n    >\r\n      <Form.List name=\"members\">\r\n        {(fields, { add, remove }) => (\r\n          <>\r\n            <Space align=\"baseline\">\r\n              <Form.Item\r\n                noStyle\r\n                shouldUpdate={(prevValues, curValues) =>\r\n                  prevValues.area !== curValues.area ||\r\n                  prevValues.sights !== curValues.sights\r\n                }\r\n              >\r\n                {() => (\r\n                  <Form.Item isListField={true} label=\"职务\">\r\n                    <Input defaultValue={\"leader\"} disabled />\r\n                  </Form.Item>\r\n                )}\r\n              </Form.Item>\r\n              <Form.Item isListField={true} label=\"人员\">\r\n                <UserSelector\r\n                  style={{ width: \"20vw\" }}\r\n                  mode=\"multiple\"\r\n                  placeholder=\"请选择人员\"\r\n                  defaultValue={username}\r\n                  disabled\r\n                />\r\n              </Form.Item>\r\n            </Space>\r\n            {fields.map((field) => (\r\n              <Space key={field.key} align=\"baseline\">\r\n                <Form.Item\r\n                  noStyle\r\n                  shouldUpdate={(prevValues, curValues) =>\r\n                    prevValues.area !== curValues.area ||\r\n                    prevValues.sights !== curValues.sights\r\n                  }\r\n                >\r\n                  {() => (\r\n                    <Form.Item\r\n                      {...field}\r\n                      label=\"职务\"\r\n                      name={[field.name, \"role\"]}\r\n                      fieldKey={[field.fieldKey, \"role\"]}\r\n                      rules={[{ required: true, message: \"请填写职务\" }]}\r\n                    >\r\n                      <Input\r\n                        placeholder=\"请填写职务\"\r\n                        onChange={() => setalert(true)}\r\n                      />\r\n                    </Form.Item>\r\n                  )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                  {...field}\r\n                  label=\"人员\"\r\n                  name={[field.name, \"username\"]}\r\n                  fieldKey={[field.fieldKey, \"username\"]}\r\n                  rules={[{ required: true, message: \"请填写对应人员\" }]}\r\n                >\r\n                  <UserSelector\r\n                    style={{ width: \"20vw\" }}\r\n                    mode=\"multiple\"\r\n                    placeholder=\"请选择人员\"\r\n                    onClick={() => {\r\n                      setalert(true);\r\n                    }}\r\n                  >\r\n                    <Option value=\"red\">Red</Option>\r\n                    <Option value=\"green\">Green</Option>\r\n                    <Option value=\"blue\">Blue</Option>\r\n                    <Option value=\"white\">Blue</Option>\r\n                    <Option value=\"2\">Blue</Option>\r\n                    <Option value=\"3\">Blue</Option>\r\n                  </UserSelector>\r\n                </Form.Item>\r\n\r\n                <MinusCircleOutlined\r\n                  onClick={() => {\r\n                    setalert(true);\r\n                    remove(field.name);\r\n                  }}\r\n                />\r\n              </Space>\r\n            ))}\r\n\r\n            <Form.Item>\r\n              <AddBtn\r\n                type=\"dashed\"\r\n                onClick={() => add()}\r\n                block\r\n                icon={<PlusOutlined />}\r\n              >\r\n                添加职位\r\n              </AddBtn>\r\n            </Form.Item>\r\n          </>\r\n        )}\r\n      </Form.List>\r\n      {alert && (\r\n        <Alert\r\n          message=\"请在更新该表单后点击确定\"\r\n          type=\"info\"\r\n          showIcon\r\n          style={{ marginBottom: \"15px\" }}\r\n        />\r\n      )}\r\n      <Form.Item>\r\n        <Button\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          onClick={() => {\r\n            setalert(false);\r\n          }}\r\n        >\r\n          确定\r\n        </Button>\r\n      </Form.Item>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled(Form)`\r\n  width: 50vw;\r\n`;\r\n\r\nconst UserSelector = styled(Select)`\r\n  width: 20vw;\r\n`;\r\n\r\nconst AddBtn = styled(Button)`\r\n  width: 40vw;\r\n`;\r\n","import { Form, Input, Button } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { ReactJSXElement } from '@emotion/react/types/jsx-namespace';\r\nimport styled from '@emotion/styled';\r\nimport { DataNode } from 'antd/lib/tree';\r\nimport Tree from 'components/Tree';\r\nimport { useAppSelector, useAppDispatch } from 'store/hooks';\r\nimport { pushTree } from 'store/features/projectSlice';\r\nimport { useMemo, useState } from 'react';\r\n\r\ninterface propsType {\r\n    className?: string;\r\n    children?: DataNode[];\r\n    btn?: ReactJSXElement;\r\n}\r\n\r\n\r\nexport default function ProjectTreeCard(props: propsType) {\r\n    return (\r\n        <>\r\n            <TreeContainer>\r\n                <Tree set />\r\n            </TreeContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nconst TreeContainer = styled.div`\r\n    overflow-y:auto;\r\n    height:90%;\r\n`\r\n","import { ReactChild, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport {\r\n  DatePicker,\r\n  Form,\r\n  Input,\r\n  Button,\r\n  PageHeader,\r\n  Result,\r\n  Select,\r\n} from \"antd\";\r\n\r\nimport PulldownDiv from \"components/PulldownDiv\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nimport { clearTree, setMem, setTags } from \"store/features/projectSlice\";\r\nimport { useAppSelector, useAppDispatch } from \"store/hooks\";\r\n\r\nimport { project } from \"types/project\";\r\nimport NPMembers from \"./NPMembers\";\r\nimport ProjectTreeCard from \"./ProjectTreeCard\";\r\nimport MoveDiv from \"components/MoveDiv\";\r\nimport Tags from \"components/AddTags\";\r\n\r\nimport { proRegist } from \"api\";\r\n\r\nconst { Option } = Select;\r\nconst children: [ReactChild] = [\r\n  <div\r\n    onClick={(e) => {\r\n      e.preventDefault();\r\n    }}\r\n  >\r\n    {<Input />}\r\n  </div>,\r\n];\r\n\r\nfor (let i = 10; i < 36; i++) {\r\n  children.push(\r\n    <Option value={i} key={i.toString(36) + i}>\r\n      {i.toString(36) + i}\r\n    </Option>\r\n  );\r\n}\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { TextArea } = Input;\r\n\r\nexport default function NewP() {\r\n  const username = useAppSelector((store) => store.me.data.username);\r\n  const { members, projectTree, tags } = useAppSelector(\r\n    (store) => store.project\r\n  );\r\n\r\n  const [visible, setvisible] = useState<boolean>(false);\r\n  const [finish, setfinish] = useState<boolean>(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onFinish = (values:any) => {\r\n\r\n    const {date,...data}=values;\r\n\r\n    const info: project = {\r\n      ...data,\r\n      members: members,\r\n      projectTree: projectTree,\r\n      tags: tags, \r\n      startAt:date[0].format('YYYY/MM/DD'), \r\n      endAt:date[1].format('YYYY/MM/DD'), \r\n    };\r\n\r\n    proRegist(info)\r\n      .then(() => {\r\n        setfinish(true);\r\n        setTimeout(() => {\r\n          history.goBack();\r\n        }, 3000);\r\n      })\r\n      .catch();\r\n  };\r\n\r\n  const onReset = () => {\r\n    form.resetFields();\r\n  };\r\n\r\n  const onChange = () => {\r\n    setvisible(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(clearTree());\r\n    dispatch(setTags([]));\r\n    dispatch(setMem([{ username: username, role: \"leader\" }]));\r\n  }, [username]);\r\n\r\n  return (\r\n    <Container className=\"newPro\">\r\n      {finish ? (\r\n        <Result status=\"success\" title=\"项目创建成功！\" subTitle=\"3s后将跳转\" />\r\n      ) : (\r\n        <>\r\n          <PageHeader\r\n            className=\"site-page-header\"\r\n            onBack={() => history.goBack()}\r\n            title=\" \"\r\n          />\r\n          {username ? (\r\n            <NPForm\r\n              form={form}\r\n              className=\"newProForm\"\r\n              name=\"control-hooks\"\r\n              onFinish={onFinish}\r\n            >\r\n              <div className=\"formInner\">\r\n                <Form.Item\r\n                  name=\"name\"\r\n                  label=\"项目名称\"\r\n                  rules={[{ required: true, message: \"请输入项目名称\" }]}\r\n                >\r\n                  <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"members\" label=\"团队分工\">\r\n                  <PulldownDiv dropdownOverlay={<NPMembers />} />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  name=\"date\"\r\n                  label=\"项目开始及结束时间\"\r\n                  rules={[{ required: true, message: \"请填写时间\" }]}\r\n                >\r\n                  <RangePicker />\r\n                </Form.Item>\r\n                <Form.Item name=\"tags\" label=\"项目标签\">\r\n                  <PulldownDiv dropdownOverlay={<Tags proTags={[]} />} />\r\n                </Form.Item>\r\n                <Form.Item name=\"projectTree\" label=\"项目节点\">\r\n                  <Button type=\"primary\" onClick={onChange}>\r\n                    编辑节点\r\n                  </Button>\r\n                </Form.Item>\r\n                <Form.Item\r\n                  name=\"description\"\r\n                  label=\"项目简介\"\r\n                  rules={[{ required: true, message: \"请填写项目简介\" }]}\r\n                >\r\n                  <TextArea\r\n                    placeholder=\"请输入项目简介\"\r\n                    allowClear\r\n                    maxLength={100}\r\n                    showCount\r\n                  />\r\n                </Form.Item>\r\n              </div>\r\n              <div className=\"formBtn\">\r\n                <Form.Item>\r\n                  <Button type=\"primary\" htmlType=\"submit\">\r\n                    提交\r\n                  </Button>\r\n                  <Button htmlType=\"button\" onClick={onReset}>\r\n                    重置\r\n                  </Button>\r\n                </Form.Item>\r\n              </div>\r\n            </NPForm>\r\n          ) : (\r\n            <Result\r\n              status=\"403\"\r\n              title=\"您无权访问此界面\"\r\n              subTitle=\"请登录后重试\"\r\n            />\r\n          )}\r\n          {visible && (\r\n            <PTContainer>\r\n              <PageHeader\r\n                className=\"site-page-header\"\r\n                onBack={() => setvisible(false)}\r\n                title=\" \"\r\n                style={{ width: \"7rem\" }}\r\n              />\r\n              <ProjectTreeCard />\r\n            </PTContainer>\r\n          )}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: white;\r\n  height: 100%;\r\n`;\r\n\r\nconst NPForm = styled(Form)`\r\n  width: 60%;\r\n  height: 100%;\r\n`;\r\n\r\nconst PTContainer = styled(MoveDiv)`\r\n  width: 50%;\r\n  height: 90%;\r\n  background-color: white;\r\n  border: 1px solid #d9d9d9;\r\n  box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.3);\r\n  position: absolute;\r\n  top: 10%;\r\n`;\r\n"],"sourceRoot":""}